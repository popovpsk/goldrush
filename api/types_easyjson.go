// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package api

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGoldrushApi(in *jlexer.Lexer, out *Treasures) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Treasures, 0, 4)
			} else {
				*out = Treasures{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 string
			v1 = string(in.String())
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushApi(out *jwriter.Writer, in Treasures) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Treasures) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Treasures) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Treasures) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Treasures) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushApi(l, v)
}
func easyjson6601e8cdDecodeGoldrushApi1(in *jlexer.Lexer, out *PostLicenseRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PostLicenseRequest, 0, 16)
			} else {
				*out = PostLicenseRequest{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 uint32
			v4 = uint32(in.Uint32())
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushApi1(out *jwriter.Writer, in PostLicenseRequest) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			out.Uint32(uint32(v6))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PostLicenseRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostLicenseRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostLicenseRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostLicenseRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushApi1(l, v)
}
func easyjson6601e8cdDecodeGoldrushApi2(in *jlexer.Lexer, out *Payment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Payment, 0, 16)
			} else {
				*out = Payment{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 uint32
			v7 = uint32(in.Uint32())
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushApi2(out *jwriter.Writer, in Payment) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			out.Uint32(uint32(v9))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Payment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushApi2(l, v)
}
func easyjson6601e8cdDecodeGoldrushApi3(in *jlexer.Lexer, out *LicensesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(LicensesResponse, 0, 2)
			} else {
				*out = LicensesResponse{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 License
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushApi3(out *jwriter.Writer, in LicensesResponse) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v LicensesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LicensesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LicensesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LicensesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushApi3(l, v)
}
func easyjson6601e8cdDecodeGoldrushApi4(in *jlexer.Lexer, out *License) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "digAllowed":
			out.DigAllowed = int(in.Int())
		case "digUsed":
			out.DigUsed = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushApi4(out *jwriter.Writer, in License) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"digAllowed\":"
		out.RawString(prefix)
		out.Int(int(in.DigAllowed))
	}
	{
		const prefix string = ",\"digUsed\":"
		out.RawString(prefix)
		out.Int(int(in.DigUsed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v License) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushApi4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v License) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushApi4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *License) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushApi4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *License) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushApi4(l, v)
}
func easyjson6601e8cdDecodeGoldrushApi5(in *jlexer.Lexer, out *ExploreResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "area":
			(out.Area).UnmarshalEasyJSON(in)
		case "amount":
			out.Amount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushApi5(out *jwriter.Writer, in ExploreResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"area\":"
		out.RawString(prefix[1:])
		(in.Area).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int(int(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExploreResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushApi5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExploreResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushApi5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExploreResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushApi5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExploreResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushApi5(l, v)
}
func easyjson6601e8cdDecodeGoldrushApi6(in *jlexer.Lexer, out *DigRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "licenseID":
			out.LicenseID = int(in.Int())
		case "posX":
			out.PosX = int32(in.Int32())
		case "posY":
			out.PosY = int32(in.Int32())
		case "depth":
			out.Depth = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushApi6(out *jwriter.Writer, in DigRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"licenseID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LicenseID))
	}
	{
		const prefix string = ",\"posX\":"
		out.RawString(prefix)
		out.Int32(int32(in.PosX))
	}
	{
		const prefix string = ",\"posY\":"
		out.RawString(prefix)
		out.Int32(int32(in.PosY))
	}
	{
		const prefix string = ",\"depth\":"
		out.RawString(prefix)
		out.Int(int(in.Depth))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DigRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushApi6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DigRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushApi6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DigRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushApi6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DigRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushApi6(l, v)
}
func easyjson6601e8cdDecodeGoldrushApi7(in *jlexer.Lexer, out *BalanceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Balance":
			out.Balance = uint32(in.Uint32())
		case "Wallet":
			if in.IsNull() {
				in.Skip()
				out.Wallet = nil
			} else {
				in.Delim('[')
				if out.Wallet == nil {
					if !in.IsDelim(']') {
						out.Wallet = make([]uint32, 0, 16)
					} else {
						out.Wallet = []uint32{}
					}
				} else {
					out.Wallet = (out.Wallet)[:0]
				}
				for !in.IsDelim(']') {
					var v13 uint32
					v13 = uint32(in.Uint32())
					out.Wallet = append(out.Wallet, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushApi7(out *jwriter.Writer, in BalanceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Balance\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Balance))
	}
	{
		const prefix string = ",\"Wallet\":"
		out.RawString(prefix)
		if in.Wallet == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Wallet {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushApi7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushApi7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushApi7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushApi7(l, v)
}
func easyjson6601e8cdDecodeGoldrushApi8(in *jlexer.Lexer, out *Area) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "posX":
			out.PosX = int(in.Int())
		case "posY":
			out.PosY = int(in.Int())
		case "sizeX":
			out.SizeX = int(in.Int())
		case "sizeY":
			out.SizeY = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushApi8(out *jwriter.Writer, in Area) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"posX\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PosX))
	}
	{
		const prefix string = ",\"posY\":"
		out.RawString(prefix)
		out.Int(int(in.PosY))
	}
	{
		const prefix string = ",\"sizeX\":"
		out.RawString(prefix)
		out.Int(int(in.SizeX))
	}
	{
		const prefix string = ",\"sizeY\":"
		out.RawString(prefix)
		out.Int(int(in.SizeY))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Area) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushApi8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Area) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushApi8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Area) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushApi8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Area) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushApi8(l, v)
}
