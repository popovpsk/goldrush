// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGoldrushTypes(in *jlexer.Lexer, out *Treasures) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Treasures, 0, 4)
			} else {
				*out = Treasures{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 string
			v1 = string(in.String())
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushTypes(out *jwriter.Writer, in Treasures) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Treasures) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Treasures) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Treasures) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Treasures) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushTypes(l, v)
}
func easyjson6601e8cdDecodeGoldrushTypes1(in *jlexer.Lexer, out *PostLicenseRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PostLicenseRequest, 0, 16)
			} else {
				*out = PostLicenseRequest{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 uint32
			v4 = uint32(in.Uint32())
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushTypes1(out *jwriter.Writer, in PostLicenseRequest) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			out.Uint32(uint32(v6))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PostLicenseRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostLicenseRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostLicenseRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostLicenseRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushTypes1(l, v)
}
func easyjson6601e8cdDecodeGoldrushTypes2(in *jlexer.Lexer, out *Payment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Payment, 0, 16)
			} else {
				*out = Payment{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 uint32
			v7 = uint32(in.Uint32())
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushTypes2(out *jwriter.Writer, in Payment) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			out.Uint32(uint32(v9))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Payment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushTypes2(l, v)
}
func easyjson6601e8cdDecodeGoldrushTypes3(in *jlexer.Lexer, out *License) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
		case "digAllowed":
			out.DigAllowed = int32(in.Int32())
		case "digUsed":
			out.DigUsed = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushTypes3(out *jwriter.Writer, in License) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"digAllowed\":"
		out.RawString(prefix)
		out.Int32(int32(in.DigAllowed))
	}
	{
		const prefix string = ",\"digUsed\":"
		out.RawString(prefix)
		out.Int32(int32(in.DigUsed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v License) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v License) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *License) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *License) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushTypes3(l, v)
}
func easyjson6601e8cdDecodeGoldrushTypes4(in *jlexer.Lexer, out *ExploredArea) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "area":
			(out.Area).UnmarshalEasyJSON(in)
		case "amount":
			out.Amount = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushTypes4(out *jwriter.Writer, in ExploredArea) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"area\":"
		out.RawString(prefix[1:])
		(in.Area).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int32(int32(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExploredArea) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExploredArea) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExploredArea) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExploredArea) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushTypes4(l, v)
}
func easyjson6601e8cdDecodeGoldrushTypes5(in *jlexer.Lexer, out *DigRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "licenseID":
			out.LicenseID = int32(in.Int32())
		case "posX":
			out.PosX = int32(in.Int32())
		case "posY":
			out.PosY = int32(in.Int32())
		case "depth":
			out.Depth = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushTypes5(out *jwriter.Writer, in DigRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"licenseID\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.LicenseID))
	}
	{
		const prefix string = ",\"posX\":"
		out.RawString(prefix)
		out.Int32(int32(in.PosX))
	}
	{
		const prefix string = ",\"posY\":"
		out.RawString(prefix)
		out.Int32(int32(in.PosY))
	}
	{
		const prefix string = ",\"depth\":"
		out.RawString(prefix)
		out.Int32(int32(in.Depth))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DigRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DigRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DigRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushTypes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DigRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushTypes5(l, v)
}
func easyjson6601e8cdDecodeGoldrushTypes6(in *jlexer.Lexer, out *Area) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "posX":
			out.PosX = int32(in.Int32())
		case "posY":
			out.PosY = int32(in.Int32())
		case "sizeX":
			out.SizeX = int32(in.Int32())
		case "sizeY":
			out.SizeY = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGoldrushTypes6(out *jwriter.Writer, in Area) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"posX\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.PosX))
	}
	{
		const prefix string = ",\"posY\":"
		out.RawString(prefix)
		out.Int32(int32(in.PosY))
	}
	{
		const prefix string = ",\"sizeX\":"
		out.RawString(prefix)
		out.Int32(int32(in.SizeX))
	}
	{
		const prefix string = ",\"sizeY\":"
		out.RawString(prefix)
		out.Int32(int32(in.SizeY))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Area) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGoldrushTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Area) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGoldrushTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Area) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGoldrushTypes6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Area) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGoldrushTypes6(l, v)
}
